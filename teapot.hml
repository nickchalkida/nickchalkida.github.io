<!DOCTYPE HTML>
<html lang="en">
<head>
<title>three.js webgl - teapot</title>
<meta charset="utf-8">
<style>body{color:#fff;font-family:Monospace;font-size:13px;text-align:center;background-color:#000;margin:0px;overflow:hidden;}#info{color:#ffffff;position:absolute;top:0px;width:100%;padding:5px;}a{color:gold;}#oldie{font-family:monospace;font-size:13px;text-align:center;background:rgb(0,0,50);color:#fff;padding:1em;width:475px;margin:5em auto 0;display:none;}</style>
</head>
<body>
<!--div id="info">
<a href="http://bit.ly/ericity" target="_blank">Udacity course</a> and <a href="http://threejs.org" target="_blank">three.js</a> - Utah Teapot
</div-->
<script src="three.min.js"></script>
<script src="TrackballControls.js"></script>
<script src="uclass_TeapotGeometry.js"></script>
<script src="Coordinates.js"></script>
<script src="Detector.js"></script>
<script src="stats.min.js"></script>
<script src="dat.gui.min.js"></script>
<script>

		/*global THREE, requestAnimationFrame, Detector, Stats, dat */
		/**
		 * @author Eric Haines / http://erichaines.com/
		 *
		 * Converted from my SPD software, http://tog.acm.org/resources/SPD/
		 * Created for the Udacity course "Interactive Rendering", http://bit.ly/ericity
		*/
		if (!Detector.webgl) { Detector.addGetWebGLMessage(); }

		var SCREEN_WIDTH = window.innerWidth;
		var SCREEN_HEIGHT = window.innerHeight;

		var container, camera, scene, renderer, stats;

		var cameraControls;

		var effectController;

		var clock = new THREE.Clock();

		// settings here don't really matter, as they'll be forced to match those
		// in fillScene - go set defaults there
		var bBottom ;
		var bLid;
		var bBody;
		var bFitLid;
		var bNonBlinn;
		var sStyle;
		var bTripod;

		var teapotSize = 3.15;	// the original size

		var tess = -1;	// -1 forces a refresh
		
		
		var ambientLight, light;
		var teapot;
		var wireframeMaterial, flatGouraudMaterial, gouraudMaterial, phongMaterial;

		var solidGround, ground, yz_plane, xy_plane;

		init();
		animate();

		function init() {

			container = document.createElement('div');
			document.body.appendChild(container);

			// CAMERA

			camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1*teapotSize, 100 * teapotSize);
			camera.position.set(-2.5*teapotSize, 2.9*teapotSize, 4.8*teapotSize);

			// LIGHTS

			ambientLight = new THREE.AmbientLight(0x333333); // 0.2

			light = new THREE.DirectionalLight(0xffffff, 1.0);
			light.position.set(32, 39, 70);

			// RENDERER

			renderer = new THREE.WebGLRenderer({ antialias: true });
			renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
			renderer.setClearColorHex(0x808080, 1.0);

			container.appendChild(renderer.domElement);

			renderer.gammaInput = true;
			renderer.gammaOutput = true;

			// STATS

			stats = new Stats();
			// for ms: stats.setMode( 1 );
			stats.domElement.style.position = 'absolute';
			stats.domElement.style.top = '0px';
			stats.domElement.style.zIndex = 100;
			container.appendChild( stats.domElement );

			stats.domElement.children[ 0 ].children[ 0 ].style.color = "#aaa";

			// EVENTS

			window.addEventListener('resize', onWindowResize, false);

			// CONTROLS

			cameraControls = new THREE.TrackballControls(camera, renderer.domElement);
			cameraControls.target.set(0, teapotSize, 0);

			// GUI

			setupGui();
			
			// MATERIALS
			// Note: setting per pixel off does not affect the specular highlight;
			// it affects only whether the light direction is recalculated each pixel.
			var materialColor = new THREE.Color();
			materialColor.setRGB(1.0, 0.8, 0.6);
			
			wireframeMaterial = new THREE.MeshBasicMaterial( { color: 0xFFCC99, wireframe: true } ) ;

			flatGouraudMaterial = createShaderMaterial("gouraud", light, ambientLight);
			flatGouraudMaterial.uniforms.uMaterialColor.value.copy(materialColor);
			flatGouraudMaterial.shading = THREE.FlatShading;
			flatGouraudMaterial.side = effectController.cull ? THREE.FrontSide : THREE.DoubleSide;

			gouraudMaterial = createShaderMaterial("gouraud", light, ambientLight);
			gouraudMaterial.uniforms.uMaterialColor.value.copy(materialColor);
			gouraudMaterial.side = effectController.cull ? THREE.FrontSide : THREE.DoubleSide;

			phongMaterial = createShaderMaterial("phong", light, ambientLight);
			phongMaterial.uniforms.uMaterialColor.value.copy(materialColor);
			phongMaterial.side = effectController.cull ? THREE.FrontSide : THREE.DoubleSide;

			fillScene();
		}

		function createShaderMaterial(id, light, ambientLight) {

			var shaderTypes = {

			'gouraud' : {

				uniforms: {

					"uDirLightPos":	{ type: "v3", value: new THREE.Vector3() },
					"uDirLightColor": { type: "c", value: new THREE.Color( 0xffffff ) },

					"uAmbientLightColor": { type: "c", value: new THREE.Color( 0x050505 ) },

					"uMaterialColor":  { type: "c", value: new THREE.Color( 0xffffff ) },
					"uSpecularColor":  { type: "c", value: new THREE.Color( 0xffffff ) },

					uKd: {
						type: "f",
						value: 0.7
					},
					uKs: {
						type: "f",
						value: 0.3
					},
					shininess: {
						type: "f",
						value: 100.0
					}
				},

				vertexShader: [

					"uniform vec3 uMaterialColor;",
					"uniform vec3 uSpecularColor;",

					"uniform vec3 uDirLightPos;",
					"uniform vec3 uDirLightColor;",

					"uniform vec3 uAmbientLightColor;",
					
					"uniform float uKd;",
					"uniform float uKs;",
					"uniform float shininess;",

					"varying vec3 vColor;",

					"void main() {",

						"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
						"vec3 vNormal = normalize( normalMatrix * normal );",
						"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
						"vec3 vViewPosition = -mvPosition.xyz;",
						
						"vColor = uAmbientLightColor * uMaterialColor;",

						"vec4 lDirection = viewMatrix * vec4( uDirLightPos, 0.0 );",
						"vec3 lVector = normalize( lDirection.xyz );",

						// diffuse: N * L
						"float diffuse = max( dot( vNormal, lVector ), 0.0);",

						"vColor += uKd * uMaterialColor * uDirLightColor * diffuse;",
					
						// specular: N * H to a power. H is light vector + view vector
						"vec3 viewPosition = normalize( vViewPosition );",
						"vec3 pointHalfVector = normalize( lVector + viewPosition );",
						"float pointDotNormalHalf = max( dot( vNormal, pointHalfVector ), 0.0 );",
						"float specular = uKs * pow( pointDotNormalHalf, shininess );",
						// however, if N * L is < 0, the light is below the horizon and should not affect the surface
						// This can give a hard termination to the highlight, but it's better than some weird sparkle.
						"if (diffuse <= 0.0) {",
							"specular = 0.0;",
						"}",

						"vColor += uDirLightColor * uSpecularColor * specular;",
					"}"

				].join("\n"),

				fragmentShader: [

					"varying vec3 vColor;",

					"void main() {",
						"gl_FragColor = vec4(vColor, 1.0);",
					"}"

				].join("\n")

			},


			'phong' : {

				uniforms: {

					"uDirLightPos":	{ type: "v3", value: new THREE.Vector3() },
					"uDirLightColor": { type: "c", value: new THREE.Color( 0xffffff ) },

					"uAmbientLightColor": { type: "c", value: new THREE.Color( 0x050505 ) },

					"uMaterialColor":  { type: "c", value: new THREE.Color( 0xffffff ) },
					"uSpecularColor":  { type: "c", value: new THREE.Color( 0xffffff ) },

					uKd: {
						type: "f",
						value: 0.7
					},
					uKs: {
						type: "f",
						value: 0.3
					},
					shininess: {
						type: "f",
						value: 100.0
					}
				},

				vertexShader: [

					"varying vec3 vNormal;",
					"varying vec3 vViewPosition;",

					"void main() {",

						"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
						"vNormal = normalize( normalMatrix * normal );",
						"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
						"vViewPosition = -mvPosition.xyz;",

					"}"

				].join("\n"),

				fragmentShader: [

					"uniform vec3 uMaterialColor;",
					"uniform vec3 uSpecularColor;",

					"uniform vec3 uDirLightPos;",
					"uniform vec3 uDirLightColor;",

					"uniform vec3 uAmbientLightColor;",
					
					"uniform float uKd;",
					"uniform float uKs;",
					"uniform float shininess;",

					"varying vec3 vNormal;",
					"varying vec3 vViewPosition;",

					"void main() {",

						// ambient
						"gl_FragColor = vec4( uAmbientLightColor * uMaterialColor, 1.0 );",

						"vec4 lDirection = viewMatrix * vec4( uDirLightPos, 0.0 );",
						"vec3 lVector = normalize( lDirection.xyz );",

						// diffuse: N * L. Normal must be normalized, since it's interpolated.
						"vec3 normal = normalize( vNormal );",
						"float diffuse = max( dot( normal, lVector ), 0.0);",

						"gl_FragColor.xyz += uKd * uMaterialColor * uDirLightColor * diffuse;",
					
						// specular: N * H to a power. H is light vector + view vector
						"vec3 viewPosition = normalize( vViewPosition );",
						"vec3 pointHalfVector = normalize( lVector + viewPosition );",
						"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
						"float specular = uKs * pow( pointDotNormalHalf, shininess );",
						// however, if N * L is < 0, the light is below the horizon and should not affect the surface
						// This can give a hard termination to the highlight, but it's better than some weird sparkle.
						"if (diffuse <= 0.0) {",
							"specular = 0.0;",
						"}",

						"gl_FragColor.xyz += uDirLightColor * uSpecularColor * specular;",

					"}"

				].join("\n")

			}

			};

			var shader = shaderTypes[id];

			var u = THREE.UniformsUtils.clone(shader.uniforms);

			var vs = shader.vertexShader;
			var fs = shader.fragmentShader;

			var material = new THREE.ShaderMaterial({ uniforms: u, vertexShader: vs, fragmentShader: fs });

			material.uniforms.uDirLightPos.value = light.position;
			material.uniforms.uDirLightColor.value = light.color;

			material.uniforms.uAmbientLightColor.value = ambientLight.color;

			return material;

		}

		// EVENT HANDLERS

		function onWindowResize() {

			SCREEN_WIDTH = window.innerWidth;
			SCREEN_HEIGHT = window.innerHeight;

			renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);

			camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
			camera.updateProjectionMatrix();

		}

		function setupGui() {

			effectController = {

				shininess: 100.0,
				ka: 0.2,
				kd: 0.7,
				ks: 0.7,
				metallic: false,

				hue: 0.09,
				saturation: 0.46,
				lightness: 1.0,

				lhue: 0.04,
				lsaturation: 0.01,
				llightness: 1.0,

				// bizarrely, if you initialize these with negative numbers, the sliders
				// will not show any decimal places.
				lx: 0.32,
				ly: 0.39,
				lz: 0.7,
				
				tess: 6,
				
				bottom: true,
				lid: true,
				body: true,
				fitLid: true,
				nonblinn: false,
				
				cull: false,
				
				ground: true,
				xzgrid: true,
				xygrid: false,
				yzgrid: false,
				tripod: false,

				style: "Phong",
			};

			var h;

			var gui = new dat.GUI();

			// style
			gui.add( effectController, "style", ["Wireframe","Flat","Gouraud","Phong"] ).name("Style");

			// material (attributes)

			h = gui.addFolder("Material control");

			h.add(effectController, "shininess", 1.0, 400.0, 1.0).name("m_shininess");
			h.add(effectController, "ka", 0.0, 1.0, 0.025).name("Ka");
			h.add(effectController, "kd", 0.0, 1.0, 0.025).name("Kd");
			h.add(effectController, "ks", 0.0, 1.0, 0.025).name("Ks");
			h.add(effectController, "metallic");

			// material (color)

			h = gui.addFolder("Material color");

			h.add(effectController, "hue", 0.0, 1.0, 0.025).name("Hue");
			h.add(effectController, "saturation", 0.0, 1.0, 0.025).name("Saturation");
			h.add(effectController, "lightness", 0.0, 1.0, 0.025).name("Lightness");

			// light (point)

			h = gui.addFolder("Light color");

			h.add(effectController, "lhue", 0.0, 1.0, 0.025).name("hue");
			h.add(effectController, "lsaturation", 0.0, 1.0, 0.025).name("saturation");
			h.add(effectController, "llightness", 0.0, 1.0, 0.025).name("lightness");

			// light (directional)

			h = gui.addFolder("Light direction");

			h.add(effectController, "lx", -1.0, 1.0, 0.025).name("x");
			h.add(effectController, "ly", -1.0, 1.0, 0.025).name("y");
			h.add(effectController, "lz", -1.0, 1.0, 0.025).name("z");

			// teapot

			h = gui.addFolder("Teapot");

			h.add(effectController, "tess", [2,3,4,5,6,8,10,12,16,24,32] ).name("Tessellation Level");
			h.add(effectController, "lid").name("display lid");
			h.add(effectController, "body").name("display body");
			h.add(effectController, "bottom").name("display bottom");
			h.add(effectController, "fitLid").name("snug lid");
			h.add(effectController, "nonblinn").name("original scale");
			h.add(effectController, "cull").name("backface culling");

			// grid

			h = gui.addFolder("Grids");

			h.add(effectController, "ground").name("ground plane");
			h.add(effectController, "xzgrid").name("ground grid");
			h.add(effectController, "yzgrid").name("vertical symmetric");
			h.add(effectController, "xygrid").name("vertical chop");
			h.add(effectController, "tripod").name("axis tripod");

		}

		//

		function animate() {

			requestAnimationFrame(animate);
			render();

		}

		function render() {

			var delta = clock.getDelta();

			cameraControls.update(delta);

			stats.update();

			if (effectController.tess !== tess ||
				effectController.style !== sStyle ||
				effectController.tripod !== bTripod ||
				effectController.bottom !== bBottom ||
				effectController.lid !== bLid ||
				effectController.body !== bBody ||
				effectController.fitLid !== bFitLid ||
				effectController.nonblinn !== bNonBlinn
			) {
				tess = effectController.tess;
				sStyle = effectController.style;
				bTripod = effectController.tripod;

				bBottom = effectController.bottom;
				bLid = effectController.lid;
				bBody = effectController.body;
				bFitLid = effectController.fitLid;
				bNonBlinn = effectController.nonblinn;

				fillScene();
			}
			
			solidGround.visible = effectController.ground;
			ground.visible = effectController.xzgrid;
			xy_plane.visible = effectController.xygrid;
			yz_plane.visible = effectController.yzgrid;
			
			// yes, this is lazy
			flatGouraudMaterial.uniforms.shininess.value = effectController.shininess;
			gouraudMaterial.uniforms.shininess.value = effectController.shininess;
			phongMaterial.uniforms.shininess.value = effectController.shininess;

			flatGouraudMaterial.uniforms.uKd.value = effectController.kd;
			gouraudMaterial.uniforms.uKd.value = effectController.kd;
			phongMaterial.uniforms.uKd.value = effectController.kd;

			flatGouraudMaterial.uniforms.uKs.value = effectController.ks;
			gouraudMaterial.uniforms.uKs.value = effectController.ks;
			phongMaterial.uniforms.uKs.value = effectController.ks;

			var materialColor = new THREE.Color();
			materialColor.setHSL(effectController.hue, effectController.saturation, effectController.lightness);
			wireframeMaterial.color.copy(materialColor);
			flatGouraudMaterial.uniforms.uMaterialColor.value.copy(materialColor);
			gouraudMaterial.uniforms.uMaterialColor.value.copy(materialColor);
			phongMaterial.uniforms.uMaterialColor.value.copy(materialColor);

			if (!effectController.metallic) {
				materialColor.setRGB(1, 1, 1);
			}
			flatGouraudMaterial.uniforms.uSpecularColor.value.copy(materialColor);
			gouraudMaterial.uniforms.uSpecularColor.value.copy(materialColor);
			phongMaterial.uniforms.uSpecularColor.value.copy(materialColor);

			flatGouraudMaterial.side = effectController.cull ? THREE.FrontSide : THREE.DoubleSide;
			gouraudMaterial.side = effectController.cull ? THREE.FrontSide : THREE.DoubleSide;
			phongMaterial.side = effectController.cull ? THREE.FrontSide : THREE.DoubleSide;
			
			// Ambient's actually controlled by the light for this demo - TODO fix
			ambientLight.color.setHSL(effectController.hue, effectController.saturation, effectController.lightness * effectController.ka);

			light.position.set(effectController.lx, effectController.ly, effectController.lz);
			light.position.normalize();

			light.color.setHSL(effectController.lhue, effectController.lsaturation, effectController.llightness);

			renderer.render(scene, camera);

		}

		function fillScene() {
			scene = new THREE.Scene();
			scene.fog = new THREE.Fog(0x808080, 8*teapotSize, 16*teapotSize);

			scene.add(camera);

			// LIGHTS

			scene.add(ambientLight);
			scene.add(light);

			// GROUND and GRIDS
			
			// put grid lines every 1 unit
			solidGround = new THREE.Mesh(
				new THREE.PlaneGeometry( 100, 100, 100, 100 ),
				new THREE.MeshLambertMaterial( { color: 0xffffff } ) );
			solidGround.rotation.x = - Math.PI / 2;
			// cheat: offset by a small amount so grid is on top
			// TODO: better way in three.js? Polygon offset is used in WebGL.
			solidGround.position.y = -0.01;

			ground = new THREE.Mesh(
				new THREE.PlaneGeometry( 100, 100, 100, 100 ),
				new THREE.MeshBasicMaterial( { color: 0x0, wireframe: true } ) );
			ground.rotation.x = - Math.PI / 2;

			yz_plane = new THREE.Mesh(
				new THREE.PlaneGeometry( 100, 100, 100, 100 ),
				new THREE.MeshBasicMaterial( { color: 0x0, wireframe: true } ) );

			xy_plane = new THREE.Mesh(
				new THREE.PlaneGeometry( 100, 100, 100, 100 ),
				new THREE.MeshBasicMaterial( { color: 0x0, wireframe: true } ) );
			xy_plane.rotation.y = - Math.PI / 2;


			scene.add( solidGround );

			scene.add( ground );

			scene.add( yz_plane );

			scene.add( xy_plane );

			// LE TEAPOT

			var fullSize = teapotSize * ( effectController.nonblinn ? 1.3 : 1 );
			
			var mtl = phongMaterial;
			if ( sStyle === "Wireframe" ) {
				mtl = wireframeMaterial;
			} else if ( sStyle === "Flat" ) {
				mtl = flatGouraudMaterial;
			} else if ( sStyle === "Gouraud" ) {
				mtl = gouraudMaterial;
			} else if ( sStyle === "Phong" ) {
				mtl = phongMaterial;
			}
			teapot = new THREE.Mesh(
				new THREE.TeapotGeometry(fullSize,
				tess, 
				effectController.bottom,
				effectController.lid,
				effectController.body,
				effectController.fitLid,
				!effectController.nonblinn ),
				mtl );
			// move teapot to be on plane
			teapot.position.y = fullSize;

			scene.add(teapot);

			if ( bTripod )
			{
				Coordinates.drawAllAxes({axisLength:10,axisRadius:0.1,axisTess:10});
			}

		}

		</script>
</body>
</html>
